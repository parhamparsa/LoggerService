// Code generated by MockGen. DO NOT EDIT.
// Source: audit_log_repository.go
//
// Generated by this command:
//
//	mockgen -source=audit_log_repository.go -destination=../../../../mocks/audit_log_repository/repo.go
//

// Package mock_audit_log_repository is a generated GoMock package.
package mock_audit_log_repository

import (
	context "context"
	reflect "reflect"

	entity "github.com/talon-one/talon-backend-assingment/internal/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockAuditLogRepository is a mock of AuditLogRepository interface.
type MockAuditLogRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuditLogRepositoryMockRecorder
	isgomock struct{}
}

// MockAuditLogRepositoryMockRecorder is the mock recorder for MockAuditLogRepository.
type MockAuditLogRepositoryMockRecorder struct {
	mock *MockAuditLogRepository
}

// NewMockAuditLogRepository creates a new mock instance.
func NewMockAuditLogRepository(ctrl *gomock.Controller) *MockAuditLogRepository {
	mock := &MockAuditLogRepository{ctrl: ctrl}
	mock.recorder = &MockAuditLogRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuditLogRepository) EXPECT() *MockAuditLogRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockAuditLogRepository) Save(ctx context.Context, user *entity.AuditLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockAuditLogRepositoryMockRecorder) Save(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAuditLogRepository)(nil).Save), ctx, user)
}
